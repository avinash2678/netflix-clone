{"version":3,"sources":["axios.js","Row.js","request.js","Banner.js","Nav.js","App.js","index.js"],"names":["instance","axios","create","baseURL","Row","props","useState","movies","setMovies","trailerUrl","setTrailerUrl","useEffect","get","fetchURL","then","response","data","results","className","style","color","title","map","movie","index","isLarge","key","id","onClick","movieTrailer","name","url","urlParams","URLSearchParams","URL","search","catch","error","console","log","handleClick","src","poster_path","backdrop_path","alt","videoId","opts","height","width","playerVars","autoplay","API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentries","Banner","Requests","Math","floor","random","length","backgroundSize","backgroundImage","backgroundPosition","original_name","overview","Nav","show","handleShow","window","addEventListener","scrollY","removeEventListener","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.85790bbd.chunk.js","sourcesContent":["import axios from \"axios\";\r\nconst instance=axios.create({\r\n    baseURL:\"https://api.themoviedb.org/3\"\r\n\r\n});\r\n\r\nexport default instance;","import React, { useState, useEffect } from 'react';\r\nimport axios from './axios';\r\nimport './Row.css';\r\nimport YouTube from 'react-youtube';\r\nimport movieTrailer from 'movie-trailer';\r\n\r\n\r\nfunction Row(props){\r\n    const baseURL=\"https://image.tmdb.org/t/p/original/\";\r\n    const [movies,setMovies]=useState([]);\r\n    const [trailerUrl,setTrailerUrl]=useState(false);\r\n    useEffect(()=>{\r\n        axios.get(props.fetchURL)\r\n        .then((response)=>{\r\n            setMovies(response.data.results);\r\n        });\r\n        \r\n        },[props.fetchURL]);\r\n\r\n        const opts={\r\n            height:\"390\",\r\n            width:\"100%\",\r\n            playerVars:{\r\n                autoplay:1,\r\n            },\r\n\r\n        };\r\n\r\n        const handleClick=(movie)=>{\r\n            if(trailerUrl){\r\n                setTrailerUrl('');\r\n            }else{\r\n                movieTrailer(movie?.name || \"\")\r\n                .then((url)=>{\r\n                    const urlParams=new URLSearchParams(new URL(url).search);\r\n                    setTrailerUrl(urlParams.get('v'));\r\n                  \r\n                })\r\n                .catch((error)=>console.log(error));\r\n\r\n            }\r\n\r\n\r\n        }\r\n        \r\nreturn(\r\n\r\n    <div className=\"row\">\r\n    <h2 style={{color: \"#ffffff\"}}>{props.title}</h2>\r\n\r\n    <div className=\"row__posters\">\r\n    {\r\n        movies.map((movie,index)=>(\r\n            \r\n            < img className={`row__poster ${props.isLarge && \"row__posterLarge\"}`} \r\n            key={movie.id} onClick={()=>handleClick(movie)}\r\n            src={`${baseURL}${props.isLarge ? movie.poster_path : movie.backdrop_path}`} alt={movie.name} />\r\n            )\r\n        )\r\n    }\r\n    </div>\r\n    \r\n      {trailerUrl &&  <YouTube videoId={trailerUrl} opts={opts} />}\r\n\r\n    </div>\r\n);\r\n}\r\n\r\nexport default Row;","const API_KEY=\"81ce3d9ffe8faca0b028d77a8158ddec\";\r\nconst requests={\r\n    fetchTrending:`/trending/all/week?api_key=${API_KEY}&language=en-US`,\r\n    fetchNetflixOriginals:`/discover/tv?api_key=${API_KEY}&with_networks=213`,\r\n    fetchTopRated:`/movie/top_rated?api_key=${API_KEY}&language=en-US`,\r\n    fetchActionMovies:`/discover/movie?api_key=${API_KEY}&with_genres=28`,\r\n    fetchComedyMovies:`/discover/movie?api_key=${API_KEY}&with_genres=35`,\r\n    fetchHorrorMovies:`/discover/movie?api_key=${API_KEY}&with_genres=27`,\r\n    fetchRomanceMovies:`/discover/movie?api_key=${API_KEY}&with_genres=10749`,\r\n    fetchDocumentries:`/discover/movie?api_key=${API_KEY}&with_genres=99`\r\n\r\n    \r\n}\r\nexport default requests;","import React,{useState,useEffect} from 'react';\r\nimport axios from './axios';\r\nimport Requests from './request'; \r\nimport './Banner.css';\r\n\r\n\r\nfunction Banner(props){\r\n    const baseURL=\"https://image.tmdb.org/t/p/original/\";\r\n    const [movies,setMovies]=useState([]);\r\n    useEffect(()=>{\r\n        axios.get(Requests.fetchNetflixOriginals)\r\n        .then((response)=>{\r\n            setMovies(response.data.results[Math.floor(Math.random() * response.data.results.length-1)]);\r\n        });\r\n        \r\n        },[props.fetchURL]);\r\n\r\nconsole.log(movies);\r\n\r\n   return(\r\n       <header className=\"banner\"\r\n       style={{\r\n           backgroundSize: \"cover\",\r\n           backgroundImage: `url(${baseURL}${movies?.backdrop_path})`,\r\n           backgroundPosition: \"center center\",\r\n       }}\r\n       \r\n        >\r\n         <div className=\"banner__contents\">\r\n         <h1 className=\"banner__title\">\r\n         {movies?.title || movies?.name || movies?.original_name}\r\n         </h1>\r\n         <div className=\"banner__buttons\">\r\n            <button className=\"banner__button\">Play</button>\r\n            <button className=\"banner__button\">My List</button>\r\n         </div>\r\n        \r\n         <h1 className=\"banner__description\">{movies?.overview}</h1>\r\n         \r\n         </div>\r\n         <div className=\"banner__fadeBottom\"/>\r\n       </header>\r\n    );\r\n}\r\n\r\nexport default Banner;","import React, { useEffect, useState } from 'react';\r\nimport './Nav.css'\r\n\r\nfunction Nav(props){\r\n    const [show,handleShow]=useState(false);\r\n\r\n    useEffect(()=>{\r\n        window.addEventListener(\"scroll\",()=>{\r\n            if(window.scrollY>100){\r\n                handleShow(true);\r\n            }else\r\n                handleShow(false);\r\n            \r\n        });\r\n        return()=>{\r\n            window.removeEventListener(\"scroll\");\r\n        };\r\n    },[]);\r\n\r\n    return(\r\n        <div className={`nav ${show && \"nav__black\"}`}>\r\n          <img  className=\"nav__logo\" src=\"https://upload.wikimedia.org/wikipedia/commons/0/08/Netflix_2015_logo.svg\" \r\n          alt=\"Netflix Logo\" />\r\n\r\n          \r\n        \r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default Nav;","import React from 'react';\nimport Row from './Row';\nimport './App.css';\nimport Requests from './request'; \nimport Banner from './Banner';\nimport Nav from './Nav';\n\nfunction App() {\n  return (\n    <div className=\"app\">\n       <Nav/>\n       <Banner/>\n      <Row title=\"NETFLIX ORIGINALS\" fetchURL={Requests.fetchNetflixOriginals} isLarge=\"true\" />\n      <Row title=\"Trending Now\" fetchURL={Requests.fetchTrending} />\n      <Row title=\"Top rated\" fetchURL={Requests.fetchTopRated} />\n      <Row title=\"Action Movies\" fetchURL={Requests.fetchActionMovies} />\n      <Row title=\"Comedy Movies\" fetchURL={Requests.fetchComedyMovies} />\n      <Row title=\"Horror Movies\" fetchURL={Requests.fetchHorrorMovies} />\n      <Row title=\"Romantic Movies\" fetchURL={Requests.fetchRomanceMovies} />\n      <Row title=\"Documentries\" fetchURL={Requests.fetchDocumentries} />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA"],"sourceRoot":""}